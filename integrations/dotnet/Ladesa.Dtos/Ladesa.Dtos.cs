// <auto-generated />
//
// To parse this JSON data, add NuGet 'System.Text.Json' then do one of these:
//
//    using Ladesa.Dtos;
//
//    var arquivo = Arquivo.FromJson(jsonString);
//    var arquivoFindOneInputView = ArquivoFindOneInputView.FromJson(jsonString);
//    var arquivoFindOneResultView = ArquivoFindOneResultView.FromJson(jsonString);
//    var arquivoView = ArquivoView.FromJson(jsonString);
//    var datedObject = DatedObject.FromJson(jsonString);
//    var entityToken = EntityToken.FromJson(jsonString);
//    var imagem = Imagem.FromJson(jsonString);
//    var imagemArquivo = ImagemArquivo.FromJson(jsonString);
//    var objectUuid = ObjectUuid.FromJson(jsonString);
//    var usuario = Usuario.FromJson(jsonString);
//    var dateTime = DateTime.FromJson(jsonString);
//    var uuid = Uuid.FromJson(jsonString);
#nullable enable
#pragma warning disable CS8618
#pragma warning disable CS8601
#pragma warning disable CS8603

namespace Ladesa.Dtos
{
    using System;
    using System.Collections.Generic;

    using System.Text.Json;
    using System.Text.Json.Serialization;
    using System.Globalization;

    /// <summary>
    /// Arquivo.
    /// </summary>
    public partial class Arquivo
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Formato do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Nome do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Tamanho do arquivo (em bytes).
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get; set; }

        /// <summary>
        /// Estratégia de armazenamento do conteúdo.
        /// </summary>
        [JsonPropertyName("storageType")]
        public string StorageType { get; set; }
    }

    /// <summary>
    /// Dados de entrada para encontrar um Arquivo por ID.
    /// </summary>
    public partial class ArquivoFindOneInputView
    {
        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    /// <summary>
    /// Dados de entrada para encontrar um Arquivo por ID.
    /// </summary>
    public partial class ArquivoFindOneResultView
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Formato do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Nome do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Tamanho do arquivo (em bytes).
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get; set; }

        /// <summary>
        /// Estratégia de armazenamento do conteúdo.
        /// </summary>
        [JsonPropertyName("storageType")]
        public string StorageType { get; set; }
    }

    /// <summary>
    /// Visão completa de um Arquivo.
    /// </summary>
    public partial class ArquivoView
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Formato do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Nome do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Tamanho do arquivo (em bytes).
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get; set; }

        /// <summary>
        /// Estratégia de armazenamento do conteúdo.
        /// </summary>
        [JsonPropertyName("storageType")]
        public string StorageType { get; set; }
    }

    /// <summary>
    /// Estrutura datada.
    /// </summary>
    public partial class DatedObject
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }
    }

    /// <summary>
    /// Imagem.
    /// </summary>
    public partial class Imagem
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Descrição da imagem.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("descricao")]
        public string Descricao { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    /// <summary>
    /// ImagemArquivo.
    /// </summary>
    public partial class ImagemArquivo
    {
        /// <summary>
        /// Altura da imagem.
        /// </summary>
        [JsonPropertyName("altura")]
        public long Altura { get; set; }

        /// <summary>
        /// Arquivo.
        /// </summary>
        [JsonPropertyName("arquivo")]
        public ArquivoClass Arquivo { get; set; }

        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Formato da imagem.
        /// </summary>
        [JsonPropertyName("formato")]
        public string Formato { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Imagem.
        /// </summary>
        [JsonPropertyName("imagem")]
        public ImagemClass Imagem { get; set; }

        /// <summary>
        /// Largura da imagem.
        /// </summary>
        [JsonPropertyName("largura")]
        public long Largura { get; set; }

        /// <summary>
        /// Mime-type da imagem.
        /// </summary>
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }
    }

    /// <summary>
    /// Arquivo.
    /// </summary>
    public partial class ArquivoClass
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Formato do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("mimeType")]
        public string MimeType { get; set; }

        /// <summary>
        /// Nome do arquivo.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nome")]
        public string Nome { get; set; }

        /// <summary>
        /// Tamanho do arquivo (em bytes).
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("sizeBytes")]
        public long? SizeBytes { get; set; }

        /// <summary>
        /// Estratégia de armazenamento do conteúdo.
        /// </summary>
        [JsonPropertyName("storageType")]
        public string StorageType { get; set; }
    }

    /// <summary>
    /// Imagem.
    ///
    /// Imagem de capa do usuário.
    ///
    /// Imagem de perfil do usuário.
    /// </summary>
    public partial class ImagemClass
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// Descrição da imagem.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("descricao")]
        public string Descricao { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    /// <summary>
    /// Estrutura identificada por id no formato uuid.
    /// </summary>
    public partial class ObjectUuid
    {
        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }
    }

    /// <summary>
    /// Usuário.
    /// </summary>
    public partial class Usuario
    {
        /// <summary>
        /// Data e hora da criação do registro.
        /// </summary>
        [JsonPropertyName("dateCreated")]
        public DateTimeOffset DateCreated { get; set; }

        /// <summary>
        /// Data e hora da exclusão do registro.
        /// </summary>
        [JsonPropertyName("dateDeleted")]
        public DateTimeOffset? DateDeleted { get; set; }

        /// <summary>
        /// Data e hora da alteração do registro.
        /// </summary>
        [JsonPropertyName("dateUpdated")]
        public DateTimeOffset DateUpdated { get; set; }

        /// <summary>
        /// E-mail do usuário.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("email")]
        public string Email { get; set; }

        /// <summary>
        /// Identificador do registro.
        /// </summary>
        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Imagem de capa do usuário.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("imagemCapa")]
        public ImagemClass ImagemCapa { get; set; }

        /// <summary>
        /// Imagem de perfil do usuário.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("imagemPerfil")]
        public ImagemClass ImagemPerfil { get; set; }

        /// <summary>
        /// Diz que o usuário tem poderes de administrador.
        /// </summary>
        [JsonPropertyName("isSuperUser")]
        public bool IsSuperUser { get; set; }

        /// <summary>
        /// Matrícula SIAPE do usuário.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("matriculaSiape")]
        public string MatriculaSiape { get; set; }

        /// <summary>
        /// Nome do usuário.
        /// </summary>
        [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
        [JsonPropertyName("nome")]
        public string Nome { get; set; }
    }

    /// <summary>
    /// Define os nomes das entidades.
    /// </summary>
    public enum EntityTokenEnum { Arquivo, ArquivoFindOneInputView, ArquivoFindOneResultView, ArquivoView, Imagem, ImagemArquivo, Usuario };

    public partial class Arquivo
    {
        public static Arquivo FromJson(string json) => JsonSerializer.Deserialize<Arquivo>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class ArquivoFindOneInputView
    {
        public static ArquivoFindOneInputView FromJson(string json) => JsonSerializer.Deserialize<ArquivoFindOneInputView>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class ArquivoFindOneResultView
    {
        public static ArquivoFindOneResultView FromJson(string json) => JsonSerializer.Deserialize<ArquivoFindOneResultView>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class ArquivoView
    {
        public static ArquivoView FromJson(string json) => JsonSerializer.Deserialize<ArquivoView>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class DatedObject
    {
        public static DatedObject FromJson(string json) => JsonSerializer.Deserialize<DatedObject>(json, Ladesa.Dtos.Converter.Settings);
    }

    public class EntityToken
    {
        public static EntityTokenEnum FromJson(string json) => JsonSerializer.Deserialize<EntityTokenEnum>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class Imagem
    {
        public static Imagem FromJson(string json) => JsonSerializer.Deserialize<Imagem>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class ImagemArquivo
    {
        public static ImagemArquivo FromJson(string json) => JsonSerializer.Deserialize<ImagemArquivo>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class ObjectUuid
    {
        public static ObjectUuid FromJson(string json) => JsonSerializer.Deserialize<ObjectUuid>(json, Ladesa.Dtos.Converter.Settings);
    }

    public partial class Usuario
    {
        public static Usuario FromJson(string json) => JsonSerializer.Deserialize<Usuario>(json, Ladesa.Dtos.Converter.Settings);
    }

    public class DateTime
    {
        public static DateTimeOffset FromJson(string json) => JsonSerializer.Deserialize<DateTimeOffset>(json, Ladesa.Dtos.Converter.Settings);
    }

    public class Uuid
    {
        public static Guid FromJson(string json) => JsonSerializer.Deserialize<Guid>(json, Ladesa.Dtos.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Arquivo self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this ArquivoFindOneInputView self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this ArquivoFindOneResultView self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this ArquivoView self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this DatedObject self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this EntityTokenEnum self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this Imagem self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this ImagemArquivo self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this ObjectUuid self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this Usuario self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this DateTimeOffset self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
        public static string ToJson(this Guid self) => JsonSerializer.Serialize(self, Ladesa.Dtos.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerOptions Settings = new(JsonSerializerDefaults.General)
        {
            Converters =
            {
                EntityTokenEnumConverter.Singleton,
                new DateOnlyConverter(),
                new TimeOnlyConverter(),
                IsoDateTimeOffsetConverter.Singleton
            },
        };
    }

    internal class EntityTokenEnumConverter : JsonConverter<EntityTokenEnum>
    {
        public override bool CanConvert(Type t) => t == typeof(EntityTokenEnum);

        public override EntityTokenEnum Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            var value = reader.GetString();
            switch (value)
            {
                case "Arquivo":
                    return EntityTokenEnum.Arquivo;
                case "ArquivoFindOneInputView":
                    return EntityTokenEnum.ArquivoFindOneInputView;
                case "ArquivoFindOneResultView":
                    return EntityTokenEnum.ArquivoFindOneResultView;
                case "ArquivoView":
                    return EntityTokenEnum.ArquivoView;
                case "Imagem":
                    return EntityTokenEnum.Imagem;
                case "ImagemArquivo":
                    return EntityTokenEnum.ImagemArquivo;
                case "Usuario":
                    return EntityTokenEnum.Usuario;
            }
            throw new Exception("Cannot unmarshal type EntityTokenEnum");
        }

        public override void Write(Utf8JsonWriter writer, EntityTokenEnum value, JsonSerializerOptions options)
        {
            switch (value)
            {
                case EntityTokenEnum.Arquivo:
                    JsonSerializer.Serialize(writer, "Arquivo", options);
                    return;
                case EntityTokenEnum.ArquivoFindOneInputView:
                    JsonSerializer.Serialize(writer, "ArquivoFindOneInputView", options);
                    return;
                case EntityTokenEnum.ArquivoFindOneResultView:
                    JsonSerializer.Serialize(writer, "ArquivoFindOneResultView", options);
                    return;
                case EntityTokenEnum.ArquivoView:
                    JsonSerializer.Serialize(writer, "ArquivoView", options);
                    return;
                case EntityTokenEnum.Imagem:
                    JsonSerializer.Serialize(writer, "Imagem", options);
                    return;
                case EntityTokenEnum.ImagemArquivo:
                    JsonSerializer.Serialize(writer, "ImagemArquivo", options);
                    return;
                case EntityTokenEnum.Usuario:
                    JsonSerializer.Serialize(writer, "Usuario", options);
                    return;
            }
            throw new Exception("Cannot marshal type EntityTokenEnum");
        }

        public static readonly EntityTokenEnumConverter Singleton = new EntityTokenEnumConverter();
    }
    
    public class DateOnlyConverter : JsonConverter<DateOnly>
    {
        private readonly string serializationFormat;
        public DateOnlyConverter() : this(null) { }

        public DateOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "yyyy-MM-dd";
        }

        public override DateOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return DateOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, DateOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    public class TimeOnlyConverter : JsonConverter<TimeOnly>
    {
        private readonly string serializationFormat;

        public TimeOnlyConverter() : this(null) { }

        public TimeOnlyConverter(string? serializationFormat)
        {
                this.serializationFormat = serializationFormat ?? "HH:mm:ss.fff";
        }

        public override TimeOnly Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                var value = reader.GetString();
                return TimeOnly.Parse(value!);
        }

        public override void Write(Utf8JsonWriter writer, TimeOnly value, JsonSerializerOptions options)
                => writer.WriteStringValue(value.ToString(serializationFormat));
    }

    internal class IsoDateTimeOffsetConverter : JsonConverter<DateTimeOffset>
    {
        public override bool CanConvert(Type t) => t == typeof(DateTimeOffset);

        private const string DefaultDateTimeFormat = "yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK";

        private DateTimeStyles _dateTimeStyles = DateTimeStyles.RoundtripKind;
        private string? _dateTimeFormat;
        private CultureInfo? _culture;

        public DateTimeStyles DateTimeStyles
        {
                get => _dateTimeStyles;
                set => _dateTimeStyles = value;
        }

        public string? DateTimeFormat
        {
                get => _dateTimeFormat ?? string.Empty;
                set => _dateTimeFormat = (string.IsNullOrEmpty(value)) ? null : value;
        }

        public CultureInfo Culture
        {
                get => _culture ?? CultureInfo.CurrentCulture;
                set => _culture = value;
        }

        public override void Write(Utf8JsonWriter writer, DateTimeOffset value, JsonSerializerOptions options)
        {
                string text;


                if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal
                        || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal)
                {
                        value = value.ToUniversalTime();
                }

                text = value.ToString(_dateTimeFormat ?? DefaultDateTimeFormat, Culture);

                writer.WriteStringValue(text);
        }

        public override DateTimeOffset Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
                string? dateText = reader.GetString();

                if (string.IsNullOrEmpty(dateText) == false)
                {
                        if (!string.IsNullOrEmpty(_dateTimeFormat))
                        {
                                return DateTimeOffset.ParseExact(dateText, _dateTimeFormat, Culture, _dateTimeStyles);
                        }
                        else
                        {
                                return DateTimeOffset.Parse(dateText, Culture, _dateTimeStyles);
                        }
                }
                else
                {
                        return default(DateTimeOffset);
                }
        }


        public static readonly IsoDateTimeOffsetConverter Singleton = new IsoDateTimeOffsetConverter();
    }
}
#pragma warning restore CS8618
#pragma warning restore CS8601
#pragma warning restore CS8603
